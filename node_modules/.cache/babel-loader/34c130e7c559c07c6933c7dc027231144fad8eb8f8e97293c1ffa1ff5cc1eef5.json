{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dclid\\\\OneDrive\\\\Desktop\\\\Chat-interface\\\\chat\\\\src\\\\components\\\\chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './hat.css';\nimport io from 'socket.io-client';\n\n// Set up socket connection (connect to the server)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000'); // Replace with your server's address\n\nfunction Chat() {\n  _s();\n  const [messages, setMessages] = useState([]); // Store messages\n  const [newMessage, setNewMessage] = useState(''); // Input message\n  const [username, setUsername] = useState(''); // Store username\n  const [typing, setTyping] = useState(false); // Typing indicator\n\n  useEffect(() => {\n    // Listen for incoming messages from other users\n    socket.on('receiveMessage', message => {\n      setMessages(prevMessages => [...prevMessages, message]);\n    });\n\n    // Listen for typing events\n    socket.on('userTyping', name => {\n      setTyping(true);\n      setTimeout(() => setTyping(false), 1000); // Stop typing indicator after 1 second\n    });\n    return () => {\n      socket.off('receiveMessage');\n      socket.off('userTyping');\n    };\n  }, []);\n  const handleSendMessage = () => {\n    if (newMessage.trim()) {\n      const message = {\n        username,\n        text: newMessage\n      };\n      socket.emit('sendMessage', message); // Emit the message to the server\n      setMessages(prevMessages => [...prevMessages, message]);\n      setNewMessage('');\n    }\n  };\n  const handleChangeName = () => {\n    // Allow the user to change their name\n    const newName = prompt('Enter your name:');\n    if (newName) {\n      setUsername(newName);\n    }\n  };\n  const handleInputChange = e => {\n    setNewMessage(e.target.value);\n    socket.emit('typing', username); // Emit typing event when user types\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: username ? /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [username, \"'s Chat\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleChangeName,\n        children: \"Enter your name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.username === username ? 'sent' : 'received'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [message.username, \": \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), message.text]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)), typing && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typing-indicator\",\n        children: \"Someone is typing...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 20\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), username && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"message-input\",\n        type: \"text\",\n        value: newMessage,\n        onChange: handleInputChange,\n        placeholder: \"Type a message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"send-button\",\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"dRMX8zo0Y6DaGnPgeVs5bvJ9XRo=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","socket","Chat","_s","messages","setMessages","newMessage","setNewMessage","username","setUsername","typing","setTyping","on","message","prevMessages","name","setTimeout","off","handleSendMessage","trim","text","emit","handleChangeName","newName","prompt","handleInputChange","e","target","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","index","type","onChange","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/dclid/OneDrive/Desktop/Chat-interface/chat/src/components/chat.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './hat.css';\r\nimport io from 'socket.io-client';\r\n\r\n// Set up socket connection (connect to the server)\r\nconst socket = io('http://localhost:5000'); // Replace with your server's address\r\n\r\nfunction Chat() {\r\n  const [messages, setMessages] = useState([]); // Store messages\r\n  const [newMessage, setNewMessage] = useState(''); // Input message\r\n  const [username, setUsername] = useState(''); // Store username\r\n  const [typing, setTyping] = useState(false); // Typing indicator\r\n\r\n  useEffect(() => {\r\n    // Listen for incoming messages from other users\r\n    socket.on('receiveMessage', (message) => {\r\n      setMessages((prevMessages) => [...prevMessages, message]);\r\n    });\r\n\r\n    // Listen for typing events\r\n    socket.on('userTyping', (name) => {\r\n      setTyping(true);\r\n      setTimeout(() => setTyping(false), 1000); // Stop typing indicator after 1 second\r\n    });\r\n\r\n    return () => {\r\n      socket.off('receiveMessage');\r\n      socket.off('userTyping');\r\n    };\r\n  }, []);\r\n\r\n  const handleSendMessage = () => {\r\n    if (newMessage.trim()) {\r\n      const message = {\r\n        username,\r\n        text: newMessage,\r\n      };\r\n      socket.emit('sendMessage', message); // Emit the message to the server\r\n      setMessages((prevMessages) => [...prevMessages, message]);\r\n      setNewMessage('');\r\n    }\r\n  };\r\n\r\n  const handleChangeName = () => {\r\n    // Allow the user to change their name\r\n    const newName = prompt('Enter your name:');\r\n    if (newName) {\r\n      setUsername(newName);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    setNewMessage(e.target.value);\r\n    socket.emit('typing', username); // Emit typing event when user types\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"chat-header\">\r\n        {username ? (\r\n          <h3>{username}'s Chat</h3>\r\n        ) : (\r\n          <button onClick={handleChangeName}>Enter your name</button>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"messages-container\">\r\n        {messages.map((message, index) => (\r\n          <div\r\n            key={index}\r\n            className={`message ${message.username === username ? 'sent' : 'received'}`}\r\n          >\r\n            <strong>{message.username}: </strong>\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n        {typing && <div className=\"typing-indicator\">Someone is typing...</div>}\r\n      </div>\r\n\r\n      {username && (\r\n        <div className=\"chat-form\">\r\n          <input\r\n            className=\"message-input\"\r\n            type=\"text\"\r\n            value={newMessage}\r\n            onChange={handleInputChange}\r\n            placeholder=\"Type a message...\"\r\n          />\r\n          <button className=\"send-button\" onClick={handleSendMessage}>Send</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}